name: Playwright Tests with Allure + GitHub Pages

# 📦 Ce workflow s'exécute :
# - à chaque push ou pull request sur la branche `main`
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 🔧 JOB PRINCIPAL : Exécution des tests Playwright + génération du rapport Allure
  test:
    runs-on: ubuntu-latest

    # ✅ Utilise une image Docker Playwright qui correspond à la version locale 1.50.1
    container:
      image: mcr.microsoft.com/playwright:v1.50.1-noble
      
    steps:
      # 1️⃣ Récupère le code source du repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Installe Java (nécessaire pour faire fonctionner la CLI Allure)
      - name: Install Java (for Allure)
        run: |
          apt-get update -y
          apt-get install -y default-jdk
          # Exporte JAVA_HOME pour que Allure fonctionne correctement
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV

      # 3️⃣ Installe les dépendances du projet + Allure CLI
      - name: Install dependencies
        run: |
          npm ci                              # installation propre depuis package-lock.json
          npm install -g allure-commandline   # installe la CLI Allure globalement

      # ⚠️ 3️⃣.5️⃣ Étape CRUCIALE : Nettoie les anciens résultats Allure
      # Sinon, les fichiers des runs précédents peuvent fausser la durée totale du test
      - name: Cleanup previous Allure results
        run: rm -rf allure-results

      # 4️⃣ Lance les tests Playwright (même si ça échoue, on veut continuer pour générer les rapports)
      - name: Run Playwright tests
        run: npm run test
        continue-on-error: true

      # 5️⃣ Génère un rapport Allure dans ./public/allure-reports/report
      - name: Generate Allure report
        if: always()   # Toujours exécuter cette étape même si les tests échouent
        run: npm run report:allure

      # 6️⃣ Génére dynamiquement un fichier `index.html` de résumé visuel (Playwright custom report)
      - name: Generate summary index.html
        if: always()
        run: npm run report:index

      # 7️⃣  Sauvegarde le dossier ./public (qui contient les rapports HTML) comme artefact pour déploiement
      - name: Upload public artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: public
          path: ./public

  # 🌍 JOB DE DÉPLOIEMENT : déploie les rapports HTML sur GitHub Pages
  deploy:
    needs: test   # ⛓️ Ce job dépend du job "test"
    runs-on: ubuntu-latest

    # ⛔ On ne déploie que si on est sur la branche main (évite le déploiement en pull request)
    if: github.ref == 'refs/heads/main'

    steps:
      # 1️⃣ Récupère le code du dépôt (utile si des infos du repo sont nécessaires)
      - name: Checkout
        uses: actions/checkout@v3

      # 2️⃣ Récupère les fichiers générés dans le dossier ./public
      - name: Download public artifact
        uses: actions/download-artifact@v4
        with:
          name: public
          path: ./public

      # 3️⃣ Déploie le contenu du dossier `./public` sur la branche `gh-pages`
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages

      # 4️⃣ Ajoute les liens directs vers le rapport dans le résumé GitHub Actions
      - name: Add landing page link
        run: |
          echo "🏠 [Page d’accueil](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.html)" >> $GITHUB_STEP_SUMMARY

      - name: Add Allure report link
        run: |
          echo "📊 [Rapport Allure](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure-reports/report/index.html)" >> $GITHUB_STEP_SUMMARY
