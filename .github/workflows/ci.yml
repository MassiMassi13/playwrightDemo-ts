name: Playwright Tests with Allure + GitHub Pages

# 📦 Ce workflow s'exécute :
# - à chaque push ou pull request sur la branche `main`
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 🔧 JOB DE TEST : lance Playwright + génère les rapports Allure
  test:
    runs-on: ubuntu-latest

    # ✅ Utilise l'image officielle Playwright 1.50.0 (jammy)
    container:
      image: mcr.microsoft.com/playwright:v1.50.0-jammy

    steps:
      # 1️⃣ Récupère le code source du repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Installe Java (nécessaire pour la CLI Allure)
      - name: Install Java (for Allure)
        run: |
          apt-get update -y
          apt-get install -y default-jdk
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV

      # 3️⃣ Installe les dépendances NPM + CLI Allure + ts-node
      - name: Install dependencies
        run: |
          npm ci
          npm install -g allure-commandline ts-node

      # 4️⃣ Supprime les anciens résultats Allure
      - name: Cleanup old results
        run: rm -rf allure-results

      # 5️⃣ Lance les tests Playwright avec le reporter en ligne
      - name: Run Playwright tests
        run: npx playwright test --reporter=line
        continue-on-error: true  # ⚠️ On continue même si les tests échouent pour générer le rapport

      # 6️⃣ Crée des variables d’environnement utiles : date, SHA court, dossier de destination
      - name: Set variables (date, sha, folder)
        id: vars
        run: |
          echo "sha=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "folder=history/$(date +'%Y-%m-%d')-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      # 7️⃣ Génère le rapport Allure dans un sous-dossier horodaté unique
      - name: Generate Allure report
        if: always()
        run: |
          mkdir -p ./public/${{ steps.vars.outputs.folder }}
          allure generate allure-results --clean -o ./public/${{ steps.vars.outputs.folder }}/report

      # 8️⃣ Met à jour le dossier ./public/latest vers le dernier rapport
      - name: Copy latest report to ./public/latest
        if: always()
        run: |
          rm -rf ./public/latest
          cp -r ./public/${{ steps.vars.outputs.folder }} ./public/latest

      # 9️⃣ Génère dynamiquement un index HTML global
      - name: Generate global index.html
        if: always()
        run: npm run report:index

      # 🔟 Sauvegarde tout le dossier ./public (contenant l'historique + latest + index.html)
      - name: Upload public folder
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: public
          path: ./public

  # 🌍 JOB DE DÉPLOIEMENT : déploie sur GitHub Pages depuis ./public
  deploy:
    needs: test
    runs-on: ubuntu-latest

    # ⛔ Déploiement uniquement sur la branche `main`
    if: github.ref == 'refs/heads/main'

    steps:
      # 1️⃣ Récupère le code
      - name: Checkout
        uses: actions/checkout@v3

      # 2️⃣ Télécharge le dossier ./public depuis l'étape précédente
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: public
          path: ./public

      # 3️⃣ Vérifie que le rapport Allure a bien été généré
      - name: Check Allure report
        run: |
          if [ ! -f "./public/latest/report/index.html" ]; then
            echo "❌ Rapport Allure non trouvé."
            exit 1
          fi

      # 4️⃣ Déploie ./public sur la branche GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages

      # 5️⃣ Ajoute les liens directs dans le résumé GitHub Actions
      - name: Add summary links
        run: |
          echo "🏠 [Index global](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "🆕 [Dernier rapport Allure](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/latest/report/index.html)" >> $GITHUB_STEP_SUMMARY
