name: Playwright Tests with Allure + GitHub Pages

# üì¶ Ce workflow s'ex√©cute :
# - √† chaque push ou pull request sur la branche `main`
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # üîß JOB PRINCIPAL : Ex√©cution des tests Playwright + g√©n√©ration du rapport Allure
  test:
    runs-on: ubuntu-latest

    # ‚úÖ Utilise une image Docker Playwright existante correspondant √† la version 1.50.0
    container:
      image: mcr.microsoft.com/playwright:v1.50.0-jammy

    steps:
      # 1Ô∏è‚É£ R√©cup√®re le code source du repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Installe Java (n√©cessaire pour faire fonctionner la CLI Allure)
      - name: Install Java (for Allure)
        run: |
          apt-get update -y
          apt-get install -y default-jdk
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV

      # 3Ô∏è‚É£ Installe les d√©pendances du projet + Allure CLI
      - name: Install dependencies
        run: |
          npm ci
          npm install -g allure-commandline

      # ‚ö†Ô∏è 3Ô∏è‚É£.5Ô∏è‚É£ Nettoie les anciens r√©sultats Allure
      - name: Cleanup previous Allure results
        run: rm -rf allure-results

      # 4Ô∏è‚É£ Lance les tests Playwright
      - name: Run Playwright tests
        run: |
          npx playwright test --reporter=line
        continue-on-error: true

      # 5Ô∏è‚É£ G√©n√®re un rapport Allure dans un dossier horodat√© : ./public/history/yyyy-mm-dd-<sha>/report
      - name: Generate timestamped Allure report
        if: always()
        run: |
          DATE=$(date +'%Y-%m-%d')
          SHA=${GITHUB_SHA::7}
          REPORT_DIR="./public/history/${DATE}-${SHA}/report"
          mkdir -p "$REPORT_DIR"
          if [ -d "allure-results" ]; then
            allure generate allure-results --clean -o "$REPORT_DIR"
          else
            echo "‚ö†Ô∏è Aucun dossier 'allure-results' trouv√©."
            echo "<h1>‚ö†Ô∏è Aucun rapport disponible</h1>" > "$REPORT_DIR/index.html"
          fi

      # 6Ô∏è‚É£ G√©n√®re dynamiquement un index.html premium dans ./public/
      - name: Generate summary index.html
        if: always()
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
        run: npm run report:index

      # 7Ô∏è‚É£ Copie le dernier rapport dans ./public/allure-reports/latest
      - name: Create latest alias
        if: always()
        run: |
          DATE=$(date +'%Y-%m-%d')
          SHA=${GITHUB_SHA::7}
          cp -r "./public/history/${DATE}-${SHA}/report" ./public/allure-reports/latest

      # 8Ô∏è‚É£ Sauvegarde le dossier ./public pour d√©ploiement
      - name: Upload public artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: public
          path: ./public

  # üåç JOB DE D√âPLOIEMENT : d√©ploie les rapports HTML sur GitHub Pages
  deploy:
    needs: test
    runs-on: ubuntu-latest

    # ‚õî On ne d√©ploie que si on est sur la branche main
    if: github.ref == 'refs/heads/main'

    steps:
      # 1Ô∏è‚É£ R√©cup√®re le code du d√©p√¥t
      - name: Checkout
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ R√©cup√®re les fichiers g√©n√©r√©s dans le dossier ./public
      - name: Download public artifact
        uses: actions/download-artifact@v4
        with:
          name: public
          path: ./public

      # 3Ô∏è‚É£ V√©rifie que le dernier rapport existe
      - name: Check if latest report exists
        run: |
          if [ ! -f "./public/allure-reports/latest/index.html" ]; then
            echo "‚ùå Dernier rapport Allure non trouv√©."
            exit 1
          fi

      # 4Ô∏è‚É£ D√©ploie le contenu du dossier ./public sur la branche gh-pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages

      # 5Ô∏è‚É£ Ajoute les liens directs dans le r√©sum√© GitHub Actions
      - name: Add landing page links
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          REPO_OWNER=${{ github.repository_owner }}
          BASE_URL="https://${REPO_OWNER}.github.io/${REPO_NAME}"

          echo "üè† [Page d‚Äôaccueil]($BASE_URL/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "üìä [Dernier rapport Allure (latest)]($BASE_URL/allure-reports/latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "üìö [Historique des rapports]($BASE_URL/history/)" >> $GITHUB_STEP_SUMMARY
